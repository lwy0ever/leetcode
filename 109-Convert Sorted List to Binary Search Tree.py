# Definition for singly\u002Dlinked list.\u000A# class ListNode:\u000A#     def __init__(self, x):\u000A#         self.val \u003D x\u000A#         self.next \u003D None\u000A\u000A# Definition for a binary tree node.\u000A# class TreeNode:\u000A#     def __init__(self, x):\u000A#         self.val \u003D x\u000A#         self.left \u003D None\u000A#         self.right \u003D None\u000A\u000Aclass Solution:\u000A    def sortedListToBST(self, head: ListNode) \u002D\u003E TreeNode:\u000A        # 优化遍历方式的分治算法\u000A        # 利用全局变量优化遍历方式\u000A        def getLength(r):\u000A            l \u003D 0\u000A            while r:\u000A                l +\u003D 1\u000A                r \u003D r.next\u000A            return l\u000A\u000A        def buildTree(left,right):  # 链表的起止位置,返回树的头部\u000A            if left \u003E right:\u000A                return None\u000A            mid \u003D (left + right) // 2\u000A            root \u003D TreeNode()\u000A            root.left \u003D buildTree(left,mid \u002D 1)\u000A            nonlocal head   # 全局变量\u000A            root.val \u003D head.val\u000A            head \u003D head.next\u000A            root.right \u003D buildTree(mid + 1,right)\u000A            return root\u000A\u000A        length \u003D getLength(head)\u000A        return buildTree(0,length \u002D 1)\u000A\u000A    # 分治算法\u000A    \u0027\u0027\u0027\u000A    def sortedListToBST(self, head: ListNode) \u002D\u003E TreeNode:\u000A        def findMid(head):\u000A            pre \u003D None  # 为便于切断链表\u000A            slow \u003D head\u000A            fast \u003D head\u000A\u000A            while fast and fast.next:\u000A                pre \u003D slow\u000A                slow \u003D slow.next\u000A                fast \u003D fast.next.next\u000A\u000A            if pre: # 切断链表\u000A                pre.next \u003D None\u000A\u000A            return slow\u000A\u000A        if not head:\u000A            return None\u000A        mid \u003D findMid(head)\u000A        root \u003D TreeNode(mid.val)\u000A        if head \u003D\u003D mid:\u000A            return root\u000A        root.left \u003D self.sortedListToBST(head)\u000A        root.right \u003D self.sortedListToBST(mid.next)\u000A        return root\u000A    \u0027\u0027\u0027