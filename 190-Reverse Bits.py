class Solution:
    def reverseBits(self, n: int) -> int:
        # 交换前一半和后一半,然后针对每一半,交换前一半和后一半
        # 0b11111111111111110000000000000000
        # 0b00000000000000001111111111111111
        n = ((n & 0xffff0000) >> 16) | ((n & 0x0000ffff) << 16);
        # 0b11111111000000001111111100000000
        # 0b00000000111111110000000011111111
        n = ((n & 0xff00ff00) >> 8) | ((n & 0x00ff00ff) << 8);
        # 0b11110000111100001111000011110000
        # 0b00001111000011110000111100001111
        n = ((n & 0xf0f0f0f0) >> 4) | ((n & 0x0f0f0f0f) << 4);
        # 0b11001100110011001100110011001100
        # 0b00110011001100110011001100110011
        n = ((n & 0xcccccccc) >> 2) | ((n & 0x33333333) << 2);
        # 0b10101010101010101010101010101010
        # 0b01010101010101010101010101010101
        n = ((n & 0xaaaaaaaa) >> 1) | ((n & 0x55555555) << 1);
        return n

        # 常规想法
        ans = 0
        for i in range(32):
            c = n & 1
            ans += c << (31 - i)
            n >>= 1
        return ans