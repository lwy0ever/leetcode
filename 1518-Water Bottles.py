class Solution:\u000A    def numWaterBottles(self, numBottles: int, numExchange: int) \u002D\u003E int:\u000A        # 1 * 酒(不含瓶) + 1 * 空瓶 \u003D numExchange * 空瓶\u000A        # 所以酒(不含瓶) \u003D (numExchange \u002D 1) * 空瓶\u000A        # 由于最后一定会剩余1个或以上的空瓶,所以需要\u002D1\u000A        return (numBottles * numExchange \u002D 1) // (numExchange \u002D 1)\u000A\u000A        # 正常计算\u000A        \u0027\u0027\u0027\u000A        ans \u003D numBottles\u000A        emptyBottles \u003D numBottles\u000A        while emptyBottles \u003E\u003D numExchange:\u000A            d,m \u003D divmod(emptyBottles,numExchange)\u000A            ans +\u003D d\u000A            emptyBottles \u003D d + m\u000A        return ans\u000A        \u0027\u0027\u0027